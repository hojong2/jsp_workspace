jsp 문법 구성
Java 문법, 태그, 내장 객체

내장 객체: request, response, application

request.getParameter("html name");

jsp에서 지금까지 사용해왔던 내장객체라 불리는 객체들의 실제 자료형은???
이 질문에 대한 답을 하려면 request의 자료형을 알아야 하고, 그러기 위해서는 jsp만으로는 설명이 힘들다

<!% 선언부 %> 맴버영역을 말한다 그런데 아무리 class는 아닌데 왜 맴버라 부르는가?
왜 jsp에서는 try~catch를 요구하지 않는가?
jsp는 javaEE의 기술을 많이 숨겨놓은 스크립트에 불과하다.
----------------------------------------------------------------------------------------

jsp란 사실 서블릿이라 불리는 즉 오직 서버에서만 해석 및 실행되어질 수 있는 javaEE의 클래스였다.
그렇다면 왜 jsp를 개발했을까? java기술로 웹을 개발하려면 javaSE까지 터득해야 하므로 진입장벽이 높다
이에 php, asp와 경쟁하려면 javaEE에서도 클래스를 몰라도 누구나 쉽게 쓸 수 있는 스크립트 수준의 언어가 필요했다
하지만 기반 기술은 여전히 java였다
개발자가 jsp를 작성하면, 실행시 jsp 자동으로 톰켓과 같은 컨테이너에 의해 서블릿이라는 클래스로 변경된다.
그렇다면 서블릿이란 클래스는 언제나 Tomcat에 의해서만 생성되지는 않는다.
개발자가 주도하여 서블릿을 개발할 수 있다.

------------------------------------------------------------------------------------------
jar 파일은 여러개의 클래스 파일이 압축된 형태이다 이는 WEB-INF/bin에 위치해야만 한다
단일 클래스 파일은 WEB-INF/classes에 위치해야만 한다. 단 이클립스에서는 bin에 넣어도 자동으로 적용된다.

------------------------------------------------------------------------------------------------
web.xml 이란?
  	일명 DD(Deployment Descriptor)라 불리며, 주 역할은 서버에 배포된 하나의 웹 어플리케이션에 대한 각종 설정을 담당한다.
  	예) 서블릿의 매핑(mapping), 어플리케이션과 관련된 이벤트, 인코딩
  	서블릿은 클래스이므로, 웹 브라우저로 직접 접근할 수 없고, 또한 컴파일 결과물이
    WEB-INF/classes에 위치하므로, WEB-INF 특징상 보안된 디렉토리 이므로, 브라우저의 url로 직접 접근이 불가능 하다.
    따라서 서블릿을 실행하기 위해서는 DD내에서 클래스와 URL간의 간접 매핑을 통해 가능하다.
----------------------------------------------------------------------------------------------
서블릿의 생명주기
1. 서블릿의 출생 시기: 최초의 접속자가 응답 요청을 했을 때 톰캣 하드에 있는 코드를 new해서 그제서야 인스턴스가 만들어진다.

순서
1. 개발자가 .class 파일을 톰캣에 올려놓는다 (톰캣 저장소)
2. 고객(사용자)이 최초의 요청을 시도(각종 요청 자료)
3. 톰캣에서 응답 객체와 요청 객체가 생성된다. (여기서 request, response, thread(다중 요청일 경우) 생성)
4. 이제 .class파일을 서블릿으로 태어나게(인스턴스화)해야한다. 우선 new를 통해 인스턴스화 한다. 여기서 인스턴스는 아무런 일도 못함 (백수)
5. init() 메서드가 태어난 인스턴스를 초기화 하여 인스턴스를 서블릿으로 정의시킨다.(취직)
6. 응답 객체와 요청 객체를 service 메서드가 매게변수로 받는다.(thread가 service 실행하고 매게변수를 전달)
7-1. service 내에서 요청자료가 get방식이면 service 하위의 doGet이 동작한다.
7-2. service 내에서 요청자료가 post방식이면 service 하위의 doPost가 동작한다.
7-x. service 내에서 요청자료가 [x] 방식이면 service 하위의 do[x]가 동작한다.
8. 요청 처리가 끝난(html 재구성) 응답 객체와 요청 객체를 다시 클라이언트에게 전달. 전달 대상은 응답 객체의 정보를 확인해서 파악
9. 클라이언트가 데이터를 받은 시점에 html, javascript부분이 실행되어 페이지가 보인다.
10. 이 시점에 서버 연결을 끊고 응답 객체와 요청 객체, thread가 죽는다. 단 서블릿(인스턴스)은 살아있음, 이후에는 재생성 불필요
11. 톰캣을 종료할 때 destroy()가 동작